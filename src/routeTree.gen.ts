/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { Route as rootRouteImport } from "./routes/__root"
import { Route as protectedLayoutRouteImport } from "./routes/(protected)/layout"
import { Route as authLoginLayoutRouteImport } from "./routes/(auth)/login/layout"
import { Route as protectedAdminIndexRouteImport } from "./routes/(protected)/admin/index"
import { Route as authLoginIndexRouteImport } from "./routes/(auth)/login/index"
import { Route as protectedAdminpagesUsersIndexRouteImport } from "./routes/(protected)/admin/(pages)/users/index"
import { Route as protectedAdminpagesQrIndexRouteImport } from "./routes/(protected)/admin/(pages)/qr/index"
import { Route as protectedAdminpagesOrdersIndexRouteImport } from "./routes/(protected)/admin/(pages)/orders/index"
import { Route as protectedAdminpagesOrderspagesDetailsIdRouteImport } from "./routes/(protected)/admin/(pages)/orders/(pages)/details/$id"

const protectedLayoutRoute = protectedLayoutRouteImport.update({
  id: "/(protected)",
  getParentRoute: () => rootRouteImport,
} as any)
const authLoginLayoutRoute = authLoginLayoutRouteImport.update({
  id: "/(auth)/login",
  path: "/login",
  getParentRoute: () => rootRouteImport,
} as any)
const protectedAdminIndexRoute = protectedAdminIndexRouteImport.update({
  id: "/admin/",
  path: "/admin/",
  getParentRoute: () => protectedLayoutRoute,
} as any)
const authLoginIndexRoute = authLoginIndexRouteImport.update({
  id: "/",
  path: "/",
  getParentRoute: () => authLoginLayoutRoute,
} as any)
const protectedAdminpagesUsersIndexRoute =
  protectedAdminpagesUsersIndexRouteImport.update({
    id: "/admin/(pages)/users/",
    path: "/admin/users/",
    getParentRoute: () => protectedLayoutRoute,
  } as any)
const protectedAdminpagesQrIndexRoute =
  protectedAdminpagesQrIndexRouteImport.update({
    id: "/admin/(pages)/qr/",
    path: "/admin/qr/",
    getParentRoute: () => protectedLayoutRoute,
  } as any)
const protectedAdminpagesOrdersIndexRoute =
  protectedAdminpagesOrdersIndexRouteImport.update({
    id: "/admin/(pages)/orders/",
    path: "/admin/orders/",
    getParentRoute: () => protectedLayoutRoute,
  } as any)
const protectedAdminpagesOrderspagesDetailsIdRoute =
  protectedAdminpagesOrderspagesDetailsIdRouteImport.update({
    id: "/admin/(pages)/orders/(pages)/details/$id",
    path: "/admin/orders/details/$id",
    getParentRoute: () => protectedLayoutRoute,
  } as any)

export interface FileRoutesByFullPath {
  "/": typeof protectedLayoutRouteWithChildren
  "/login": typeof authLoginLayoutRouteWithChildren
  "/login/": typeof authLoginIndexRoute
  "/admin": typeof protectedAdminIndexRoute
  "/admin/orders": typeof protectedAdminpagesOrdersIndexRoute
  "/admin/qr": typeof protectedAdminpagesQrIndexRoute
  "/admin/users": typeof protectedAdminpagesUsersIndexRoute
  "/admin/orders/details/$id": typeof protectedAdminpagesOrderspagesDetailsIdRoute
}
export interface FileRoutesByTo {
  "/": typeof protectedLayoutRouteWithChildren
  "/login": typeof authLoginIndexRoute
  "/admin": typeof protectedAdminIndexRoute
  "/admin/orders": typeof protectedAdminpagesOrdersIndexRoute
  "/admin/qr": typeof protectedAdminpagesQrIndexRoute
  "/admin/users": typeof protectedAdminpagesUsersIndexRoute
  "/admin/orders/details/$id": typeof protectedAdminpagesOrderspagesDetailsIdRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  "/(protected)": typeof protectedLayoutRouteWithChildren
  "/(auth)/login": typeof authLoginLayoutRouteWithChildren
  "/(auth)/login/": typeof authLoginIndexRoute
  "/(protected)/admin/": typeof protectedAdminIndexRoute
  "/(protected)/admin/(pages)/orders/": typeof protectedAdminpagesOrdersIndexRoute
  "/(protected)/admin/(pages)/qr/": typeof protectedAdminpagesQrIndexRoute
  "/(protected)/admin/(pages)/users/": typeof protectedAdminpagesUsersIndexRoute
  "/(protected)/admin/(pages)/orders/(pages)/details/$id": typeof protectedAdminpagesOrderspagesDetailsIdRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | "/"
    | "/login"
    | "/login/"
    | "/admin"
    | "/admin/orders"
    | "/admin/qr"
    | "/admin/users"
    | "/admin/orders/details/$id"
  fileRoutesByTo: FileRoutesByTo
  to:
    | "/"
    | "/login"
    | "/admin"
    | "/admin/orders"
    | "/admin/qr"
    | "/admin/users"
    | "/admin/orders/details/$id"
  id:
    | "__root__"
    | "/(protected)"
    | "/(auth)/login"
    | "/(auth)/login/"
    | "/(protected)/admin/"
    | "/(protected)/admin/(pages)/orders/"
    | "/(protected)/admin/(pages)/qr/"
    | "/(protected)/admin/(pages)/users/"
    | "/(protected)/admin/(pages)/orders/(pages)/details/$id"
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  protectedLayoutRoute: typeof protectedLayoutRouteWithChildren
  authLoginLayoutRoute: typeof authLoginLayoutRouteWithChildren
}

declare module "@tanstack/react-router" {
  interface FileRoutesByPath {
    "/(protected)": {
      id: "/(protected)"
      path: "/"
      fullPath: "/"
      preLoaderRoute: typeof protectedLayoutRouteImport
      parentRoute: typeof rootRouteImport
    }
    "/(auth)/login": {
      id: "/(auth)/login"
      path: "/login"
      fullPath: "/login"
      preLoaderRoute: typeof authLoginLayoutRouteImport
      parentRoute: typeof rootRouteImport
    }
    "/(protected)/admin/": {
      id: "/(protected)/admin/"
      path: "/admin"
      fullPath: "/admin"
      preLoaderRoute: typeof protectedAdminIndexRouteImport
      parentRoute: typeof protectedLayoutRoute
    }
    "/(auth)/login/": {
      id: "/(auth)/login/"
      path: "/"
      fullPath: "/login/"
      preLoaderRoute: typeof authLoginIndexRouteImport
      parentRoute: typeof authLoginLayoutRoute
    }
    "/(protected)/admin/(pages)/users/": {
      id: "/(protected)/admin/(pages)/users/"
      path: "/admin/users"
      fullPath: "/admin/users"
      preLoaderRoute: typeof protectedAdminpagesUsersIndexRouteImport
      parentRoute: typeof protectedLayoutRoute
    }
    "/(protected)/admin/(pages)/qr/": {
      id: "/(protected)/admin/(pages)/qr/"
      path: "/admin/qr"
      fullPath: "/admin/qr"
      preLoaderRoute: typeof protectedAdminpagesQrIndexRouteImport
      parentRoute: typeof protectedLayoutRoute
    }
    "/(protected)/admin/(pages)/orders/": {
      id: "/(protected)/admin/(pages)/orders/"
      path: "/admin/orders"
      fullPath: "/admin/orders"
      preLoaderRoute: typeof protectedAdminpagesOrdersIndexRouteImport
      parentRoute: typeof protectedLayoutRoute
    }
    "/(protected)/admin/(pages)/orders/(pages)/details/$id": {
      id: "/(protected)/admin/(pages)/orders/(pages)/details/$id"
      path: "/admin/orders/details/$id"
      fullPath: "/admin/orders/details/$id"
      preLoaderRoute: typeof protectedAdminpagesOrderspagesDetailsIdRouteImport
      parentRoute: typeof protectedLayoutRoute
    }
  }
}

interface protectedLayoutRouteChildren {
  protectedAdminIndexRoute: typeof protectedAdminIndexRoute
  protectedAdminpagesOrdersIndexRoute: typeof protectedAdminpagesOrdersIndexRoute
  protectedAdminpagesQrIndexRoute: typeof protectedAdminpagesQrIndexRoute
  protectedAdminpagesUsersIndexRoute: typeof protectedAdminpagesUsersIndexRoute
  protectedAdminpagesOrderspagesDetailsIdRoute: typeof protectedAdminpagesOrderspagesDetailsIdRoute
}

const protectedLayoutRouteChildren: protectedLayoutRouteChildren = {
  protectedAdminIndexRoute: protectedAdminIndexRoute,
  protectedAdminpagesOrdersIndexRoute: protectedAdminpagesOrdersIndexRoute,
  protectedAdminpagesQrIndexRoute: protectedAdminpagesQrIndexRoute,
  protectedAdminpagesUsersIndexRoute: protectedAdminpagesUsersIndexRoute,
  protectedAdminpagesOrderspagesDetailsIdRoute:
    protectedAdminpagesOrderspagesDetailsIdRoute,
}

const protectedLayoutRouteWithChildren = protectedLayoutRoute._addFileChildren(
  protectedLayoutRouteChildren,
)

interface authLoginLayoutRouteChildren {
  authLoginIndexRoute: typeof authLoginIndexRoute
}

const authLoginLayoutRouteChildren: authLoginLayoutRouteChildren = {
  authLoginIndexRoute: authLoginIndexRoute,
}

const authLoginLayoutRouteWithChildren = authLoginLayoutRoute._addFileChildren(
  authLoginLayoutRouteChildren,
)

const rootRouteChildren: RootRouteChildren = {
  protectedLayoutRoute: protectedLayoutRouteWithChildren,
  authLoginLayoutRoute: authLoginLayoutRouteWithChildren,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()
